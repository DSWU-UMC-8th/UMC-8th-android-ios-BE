// src/repository/repository.js

import pool from "../config/db.js";

//// üîπ ÏÇ¨Ïö©Ïûê Í¥ÄÎ†® Ìï®Ïàò //// 

// 1. ÏïÑÏù¥Îîî Ï§ëÎ≥µ Ï≤¥ÌÅ¨
export const checkUserExist = async (username) => {
  const conn = await pool.getConnection();
  try {
    const sql = "SELECT * FROM User WHERE username = ?";
    const [rows] = await conn.query(sql, [username]);
    return rows.length > 0 ? rows[0].id : null;
  } catch (err) {
    throw new Error(`ÏïÑÏù¥Îîî Ï§ëÎ≥µ Ï≤¥ÌÅ¨ Ï§ë Ïò§Î•ò Î∞úÏÉù: ${err.message}`);
  } finally {
    conn.release();
  }
};

// 2. ÏÇ¨Ïö©Ïûê Ï∂îÍ∞Ä
export const addUser = async (user) => {
  const conn = await pool.getConnection();
  try {
    const sql = `INSERT INTO User (username, password, email, nickname)
                 VALUES (?, ?, ?, ?)`;
    const [result] = await conn.query(sql, [
      user.username,
      user.password,
      user.email,
      user.nickname,
    ]);

    if (result.affectedRows <= 0) {
      throw new Error("ÌöåÏõêÍ∞ÄÏûÖÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
    }

    const [rows] = await conn.query("SELECT * FROM User WHERE id = ?", [result.insertId]);
    const newUser = rows[0];

    return {
      userId: newUser.id,
      username: newUser.username,
      email: newUser.email,
      nickname: newUser.nickname,
      createdAt: newUser.created_at,
    };
  } catch (err) {
    throw new Error(`ÏÇ¨Ïö©Ïûê Ï∂îÍ∞Ä Ï§ë Ïò§Î•ò Î∞úÏÉù: ${err.message}`);
  } finally {
    conn.release();
  }
};

// 3. ÏÇ¨Ïö©Ïûê IDÎ°ú Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
export const getUserByUserId = async (userId) => {
  const conn = await pool.getConnection();
  try {
    const sql = "SELECT * FROM User WHERE id = ?";
    const [rows] = await conn.query(sql, [userId]);

    if (rows.length <= 0) {
      throw new Error("Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî ÏÇ¨Ïö©ÏûêÏûÖÎãàÎã§.");
    }

    const user = rows[0];
    return {
      userId: user.id,
      username: user.username,
      password: user.password,
      email: user.email,
      nickname: user.nickname,
      status: user.status,
      createdAt: user.created_at,
      updatedAt: user.updated_at,
    };
  } catch (err) {
    throw new Error(`ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï°∞Ìöå Ï§ë Ïò§Î•ò Î∞úÏÉù: ${err.message}`);
  } finally {
    conn.release();
  }
};

//// üîπ Î¶¨Î∑∞ Í¥ÄÎ†® Ìï®Ïàò ////

// 4. Î¶¨Î∑∞ Îì±Î°ù
export const insertReview = async (userId, movieId, rating, content, spoiler) => {
  const conn = await pool.getConnection();
  try {
    await conn.beginTransaction();

    const [result] = await conn.query(
      `INSERT INTO Review (user_id, movie_id, rating, content, is_spoiler, created_at)
       VALUES (?, ?, ?, ?, ?, NOW())`,
      [userId, movieId, rating, content, spoiler]
    );

    const reviewId = result.insertId;
    return { conn, reviewId };
  } catch (err) {
    await conn.rollback();
    conn.release();
    throw new Error(`Î¶¨Î∑∞ Îì±Î°ù Ï§ë Ïò§Î•ò Î∞úÏÉù: ${err.message}`);
  }
};

// 5. Î¶¨Î∑∞ Í∞êÏ†ï Ìè¨Ïù∏Ìä∏ Îì±Î°ù
export const insertReviewPoints = async (conn, reviewId, userId, movieId, pointIds) => {
  try {
    for (const pointId of pointIds) {
      await conn.query(
        `INSERT INTO Review_Point (review_id, id, movie_id, point_id)
         VALUES (?, ?, ?, ?)`,
        [reviewId, userId, movieId, pointId]
      );
    }

    await conn.commit();
  } catch (err) {
    await conn.rollback();
    throw new Error(`Í∞êÏ†ï Ìè¨Ïù∏Ìä∏ Îì±Î°ù Ï§ë Ïò§Î•ò Î∞úÏÉù: ${err.message}`);
  } finally {
    conn.release();
  }
};
